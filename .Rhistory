golem::create_golem(".", package_name = "fisheriesXplorer")
golem::create_golem(".", package_name = "fisheriesXplorer", overwrite = T)
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
golem::add_module("landing_page")
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
usethis::use_package(leaflet)
usethis::use_package("leaflet")
devtools::document()
devtools::load_all("."); run_app()
usethis::use_pipe()
usethis::use_pipe(export = F)
devtools::document()
devtools::load_all("."); run_app()
golem::add_fct("map_ecoregion")
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
map_ecoregion(eco_shape, map_shape)
devtools::load_all("."); run_app()
input
devtools::load_all("."); run_app()
input
input
devtools::load_all("."); run_app()
input
source("C:/Users/neilm/Documents/projects/fisheriesXplorer/R/mod_landing_page.R")
input
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
input
input$selected_locations
devtools::load_all("."); run_app()
input
input$selected_locations
devtools::load_all("."); run_app()
input
input$selected_locations
input$selected_locations
input$selected_locations
devtools::load_all("."); run_app()
devtools::document()
usethis::use_package("bslib")
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
mainPanel(
tabsetPanel(
tabPanel("Plot", plotOutput("plot")),
tabPanel("Summary", verbatimTextOutput("summary")),
tabPanel("Table", tableOutput("table"))
)
)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
radioButtons("controller", "Controller", 1:3, 1)
),
mainPanel(
tabsetPanel(
id = "hidden_tabs",
# Hide the tab values.
# Can only switch tabs by using `updateTabsetPanel()`
type = "hidden",
tabPanelBody("panel1", "Panel 1 content"),
tabPanelBody("panel2", "Panel 2 content"),
tabPanelBody("panel3", "Panel 3 content")
)
)
)
)
server <- function(input, output, session) {
observeEvent(input$controller, {
updateTabsetPanel(session, "hidden_tabs", selected = paste0("panel", input$controller))
})
}
if (interactive()) {
shinyApp(ui, server)
}
mainPanel(
tabsetPanel(
tabPanel("Plot", plotOutput("plot")),
tabPanel("Summary", verbatimTextOutput("summary")),
tabPanel("Table", tableOutput("table"))
)
)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
radioButtons("controller", "Controller", 1:3, 1)
),
mainPanel(
tabsetPanel(
id = "hidden_tabs",
# Hide the tab values.
# Can only switch tabs by using `updateTabsetPanel()`
type = "pills",
tabPanelBody("panel1", "Panel 1 content"),
tabPanelBody("panel2", "Panel 2 content"),
tabPanelBody("panel3", "Panel 3 content")
)
)
)
)
server <- function(input, output, session) {
observeEvent(input$controller, {
updateTabsetPanel(session, "hidden_tabs", selected = paste0("panel", input$controller))
})
}
if (interactive()) {
shinyApp(ui, server)
}
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
source("C:/Users/neilm/Documents/projects/fisheriesXplorer/R/mod_landing_page.R")
input$selected_locations
length(input$selected_locations)
length(input$selected_locations())
length("")
length("a")
length("aa")
exists("")
"" == ""
"" == "a"
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
input
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
input
devtools::load_all("."); run_app()
input
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
input
input$landing_page_1-selected_locations
input
ns()
ns("hi")
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
devtools::document()
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
devtools::document()
devtools::load_all("."); run_app()
eco_shape <- sf::st_read(dsn = system.file("extdata/shape_eco_simplified", package = "seawiseEBFM"),
layer = "shape_eco_simplified")
load("C:/Users/neilm/Documents/projects/fisheriesXplorer/data/eco_shape.rda")
eco_shape
map_shape <- sf::st_read(dsn = "data-raw/world_map_simplified",
layer = "world_map_simplified")
map_shape <- sf::st_read(dsn = "data-raw"
layer = "world_map_simplified")
map_shape <- sf::st_read(dsn = "data-raw",
layer = "world_map_simplified")
usethis::use_data(map_shape, overwrite = TRUE)
eco_shape <- sf::st_read("data-raw",
layer = "shape_eco_simplified")
eco_shape
eco_shape$Ecoregion
eco_shape <- sf::st_read("data-raw",
layer = "shape_eco_simplified")
eco_shape <- dplyr::filter(eco_shape, Ecoregion %in% c("Azores", "Baltic Sea", "Barents Sea", "Bay of Biscay and Iberian Coast", "Celtic Seas", "Faroes", "Greater North Sea", "Greenland Sea", "Icelandic Waters", "Norwegian Sea", "Oceanic Northeast Atlantic"))
length(c("Azores", "Baltic Sea", "Barents Sea", "Bay of Biscay and Iberian Coast", "Celtic Seas", "Faroes", "Greater North Sea", "Greenland Sea", "Icelandic Waters", "Norwegian Sea", "Oceanic Northeast Atlantic"))
# Add an id to each ecoregion (this potentially can be eliminated because the ecoregions in the shape file have already an id)
eco_shape$uid <- paste0("P", 1:11)
eco_shape
eco_shape <- sf::st_read("data-raw",
layer = "shape_eco_simplified")
eco_shape <- dplyr::filter(eco_shape, Ecoregion %in% c("Azores", "Baltic Sea", "Barents Sea", "Bay of Biscay and Iberian Coast", "Celtic Seas", "Faroes", "Greater North Sea", "Greenland Sea", "Icelandic Waters", "Norwegian Sea", "Oceanic Northeast Atlantic"))
# Add an id to each ecoregion (this potentially can be eliminated because the ecoregions in the shape file have already an id)
eco_shape$uid <- paste0("P", 1:11)
eco_shape
eco_shape <- sf::st_read("data-raw",
layer = "shape_eco_simplified")
eco_shape
eco_shape <- dplyr::filter(eco_shape, Ecoregion %in% c("Azores", "Baltic Sea", "Barents Sea", "Bay of Biscay and the Iberian Coast", "Celtic Seas", "Faroes", "Greater North Sea", "Greenland Sea", "Icelandic Waters", "Norwegian Sea", "Oceanic Northeast Atlantic"))
# Add an id to each ecoregion (this potentially can be eliminated because the ecoregions in the shape file have already an id)
eco_shape$uid <- paste0("P", 1:11)
eco_shape
usethis::use_data(eco_shape, overwrite = TRUE)
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
devtools::load_all(".")
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
devtools::load_all("."); run_app()
